class I extends Mino {
  constructor() {
    let pattern = [
      [0, 0, 0, 0],
      [1, 1, 1, 1],
      [0, 0, 0, 0],
      [0, 0, 0, 0]
    ];
    super(pattern, Color.I);
  }
}class J extends Mino {
  constructor() {
    let pattern = [
      [1, 0, 0],
      [1, 1, 1],
      [0, 0, 0],
    ];
    super(pattern, Color.J);
  }
}class L extends Mino {
  constructor() {
    let pattern = [
      [0, 0, 1],
      [1, 1, 1],
      [0, 0, 0],
    ];
    super(pattern, Color.L);
  }
}class Mino {
  constructor(pattern, color) {
    this.colors = new Array(pattern.length);
    for (let j = 0; j < pattern.length; j++) {
      this.colors[j] = new Array(pattern[j].length);
      for (let i = 0; i < pattern.length; i++) {
        if(pattern[j][i]) {
          this.colors[j][i] = color;
        } else {
          this.colors[j][i] = Color.EMPTY;
        }
      }
    }
  }

  getColors() {
    return this.colors;
  }
}class O extends Mino {
  constructor() {
    let pattern = [
      [1, 1],
      [1, 1],
    ];
    super(pattern, Color.O);
  }
}class S extends Mino {
  constructor() {
    let pattern = [
      [0, 1, 1],
      [1, 1, 0],
      [0, 0, 0],
    ];
    super(pattern, Color.S);
  }
}class T extends Mino {
  constructor() {
    let pattern = [
      [0, 1, 0],
      [1, 1, 1],
      [0, 0, 0],
    ];
    super(pattern, Color.T);
  }
}class Z extends Mino {
  constructor() {
    let pattern = [
      [1, 1, 0],
      [0, 1, 1],
      [0, 0, 0],
    ];
    super(pattern, Color.Z);
  }
}<!DOCTYPE html>

<html>
  <head>
    <script type="text/javascript" src="./out.js"></script>
    <link rel="stylesheet" type="text/css" href="./index.css">
  </head>

  <body>
    <h1>Tetris</h1>
    <canvas id="holdCanvas"></canvas>
    <canvas id="mainCanvas"></canvas>
    <canvas id="nextCanvas"></canvas>
  </body>
  <div id="code"></div>
</html>